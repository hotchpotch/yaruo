** Introduction

>|AA|
　 　　　＿＿＿_
　　　／　　 　 　＼ （ ;;;;(
　 ／　　＿ノ　 ヽ__＼) ;;;;)
／ 　　 （─） 　（─ /;;／
|　 　　 　 （__人__） l;;,´　そろそろ新しいバージョン管理システムをつかうお
/　　　 　 ∩ ノ)━・'／　　　　今どきRCSなんてありえないお…
(　 ＼　／ ＿ノ´.|　 |
.＼　 " 　／＿＿|　 |
　　＼ ／＿＿＿ ／


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼ ﾎｼﾞﾎｼﾞ
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼ 　＜最近は分散が流行らしいお
　 |　　　 ｍj |ー'´　　　　　 |
　 ＼　 〈＿_ﾉ　　　　　 　／
　　　　ノ　　ﾉ

　　　　　 　　　＿＿＿_
　　　　　　　／　　 　 　＼
　　　　 　／　　─　 　 ─＼ 　SVN は小学生まで、と…
　　　　／ 　　 （●） 　（●） ＼　とりあえずぐぐってみるかお
　　　　|　 　　 　 （__人__）　 　 |　＿＿＿＿＿＿＿_
　 　　 ＼　　 　　 ｀ ⌒´ 　 ,／　.| |　　　　　　　　　　|
　　　　ノ　　　　　　　　　　　＼　| |　　　　　　　　　　|　
　 ／´ 　 　　　　　　　　　　　 　 | |　　　　　　　　　　|
　|　　　　ｌ 　 　 　 　 　 　　　　　| |　　　　　　　　　　|
　ヽ　　　 -一ー_~､⌒)^),-､　　　| |_＿＿＿＿＿＿__|
　　ヽ ＿＿＿＿,ノγ⌒ヽ)ニニ-￣　　　| |　　| 
||<



<img src="http://f.hatena.ne.jp/images/fotolife/s/secondlife/20080501/20080501174529.png">


>|AA|
　　　　　　＿＿＿
　　　　／ ⌒　　⌒＼
　　 ／　（⌒）　 （⌒） ＼　　　
　／ 　 ///（__人__）/// ＼　　
  |　　 u. 　 `Y⌒y'´　　　 |　　　ぎっとたんテラカワユスだお！！
　 ＼ 　 　 　 ﾞー ′　　,／　　　
 　 /⌒ヽ　 　ー‐ 　 　ｨヽ　　　　
　 / rｰ'ゝ　　　　　　　〆ヽ
　/,ﾉヾ　,>　　　　　　ヾ_ノ,|
　|　ヽ〆　　　　　　　　|´　|


　 　　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　git というのを使ってみるお！これでモテモテだお！！
　 |　　　　　|r┬-|　　　　　|　　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　　　　 　　　＿＿＿_
　　　　　　　／　　 　 　＼
　　　　 　／　　─　 　 ─＼
　　　　／ 　　 （●） 　（●） ＼ まずはチュートリアルからやってみるお
　　　　|　 　　 　 （__人__）　 　 |　＿＿＿＿＿＿＿_
　 　　 ＼　　 　　 ｀ ⌒´ 　 ,／　.| |　　　　　　　　　　|
　　　　ノ　　　　　　　　　　　＼　| |　　　　　　　　　　|　
　 ／´ 　 　　　　　　　　　　　 　 | |　　　　　　　　　　|
　|　　　　ｌ 　 　 　 　 　 　　　　　| |　　　　　　　　　　|
　ヽ　　　 -一ー_~､⌒)^),-､　　　| |_＿＿＿＿＿＿__|
　　ヽ ＿＿＿＿,ノγ⌒ヽ)ニニ-￣　　　| |　　| 
||<



http://www.kernel.org/pub/software/scm/git/docs/gitcore-tutorial.html


>|AA|
　 　　　　　＿＿＿_
　 　　　／_ノ 　ヽ､_＼
　　　oﾟ(（●）) (（●）)ﾟo　　　　　　　英語ｗｗｗ
　 ／::::::⌒（__人__）⌒::::: ＼　　　　　　読めるわけねーおｗｗｗｗ
　 |　　　　　|r┬-|　　　　　| 　　　(⌒)
　 |　　　　　|　|　 |　　　　　|　　　ﾉ ~.ﾚ-r┐､
　 |　　　　　|　|　 |　　　　　|　　ノ__　 |　.|　|　|
　 ＼ 　　 　 `ー'´ 　 　 ／〈￣ 　　｀-Lλ_ﾚﾚ
　　　　　　　　　　　　　　　　　￣｀ー‐---‐‐´


　　　　　 ／￣￣＼　
　　　　／ﾉ(　_ノ　　＼
　　　　|　⌒(（ ●）（●）
　　　　.|　　　　 （__人__）　/⌒l
　　　 　|　　　　　｀ ⌒´ﾉ　|`'''|
　　　　／ ⌒ヽ　　　　 }　 |　 |　　　　　　　　　　　　　　
　　 ／　 へ　　＼　　 }__/　/ 　　 　　　　　　　　　／￣￣＼
　／　／　|　　　　　 ノ 　 ノ　　　　　　　　　　　／ ●))　((●＼’,　･
( _ ノ　　　 |　　　　　 ＼´　　　　　　 ＿　 　　（　　　(_人_)’∴　）,　 ’
　　　　　 　|　　　　　　　＼＿,, -‐ ''"　 ￣￣ﾞ''―---└'´￣｀ヽ　　　て
　　　　　　 .|　　　　　　　　　　　　　　　　　　＿＿＿＿＿＿ ノ　　 　（
　　　　　　　ヽ　　　　　　　　　　　＿,, -‐ ''"　　ﾉ　　　　　　 ヽ　　　ｒ'"￣
　　　　　　　　 ＼　　　　　　　, '´　　　　　　　　し/.. 　　　　| J
　　　　　　　　　　＼　　　　　(　　　　　　　　　　 /　　　　　 |
　　　　　　　　　　　 ＼　　　　＼　　　　　　　　　し-　 '^`-J 



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　……大丈夫
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　私が和訳する
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　きっとわかる
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　　　　　　＿＿＿
　　　　／ ⌒　　⌒＼
　　 ／　（⌒）　 （⌒） ＼　　　
　／ 　 ///（__人__）/// ＼　　
  |　　 u. 　 `Y⌒y'´　　　 |　　　ぎっとたんもカワユスだけど有希ちゃんも捨てがたいお！
　 ＼ 　 　 　 ﾞー ′　　,／　　　　是非お願いするお！！
 　 /⌒ヽ　 　ー‐ 　 　ｨヽ　　　　
　 / rｰ'ゝ　　　　　　　〆ヽ
　/,ﾉヾ　,>　　　　　　ヾ_ノ,|
　|　ヽ〆　　　　　　　　|´　|
||<

** Creating a git repository
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　…早速チュートリアル用のディレクトリを作って
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　　 　＿＿＿_
　　　　 ／ ＼　　／＼　ｷﾘｯ
.　　　／　（ー） 　（ー）＼　　ディレクトリを作るコマンドは mkdir だお！
　　／　　 ⌒（__人__）⌒ ＼
　　|　　 　　　|r┬-|　　　　|　　
　　 ＼　　　　 `ー'´　　 ／　　
　　ノ　　　　　　　　　　 　＼
||<

>||
$ mkdir git-tutorial
||<

>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　ディレクトリに入って git-init で git リポジトリをセットアップする
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ cd git-tutorial
$ git init
Initialized empty Git repository in .git/
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　.git ってディレクトリができたお！これはなんだお？
　 |　　　　　|r┬-|　　　　　|　　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　…そのディレクトリにリポジトリの情報が入っている
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　　　　　　　　　　,..　--- ..
　　　　　　 ,..-.:.￣.:..:..:.. : : : : ｀丶、
　　　 　 ／:..:..:.　..: : : : : : : : : : : : :＼
　　　　/:ﾍ=､､:.＿: : : : ＿＿:ヽ:_:　-^,.ﾄ､
　　　ノ:..:..:./:.. ￣: :７´:―― : :|‐: :´､: ヽヽ
　　ｰ-/:..:.i:../:. : : ,/:..:.:ｲ:.ﾊ:.. : j:.. :}:.､ヽ:. ﾄヽ
　　　 !:..:..:|:.{/:..ィ_jz≦ﾉ '　}:.／_}_ｲ:. } |:.｜||
　　　 Vl:.:.|:. Vl´｢＿　､｀　ﾉ′ ＿ﾉ:ｿ:ｲ: ﾘ ﾉ
.　 　 　 }:ハ: : l f7｢::｀ﾊ　　　/:::7}7ｲ:/}/
　　　　 ﾉﾍｰl､: :!VZﾂ　　 　 ﾋ:ﾉ/:.//　
　　　 　 　 ｀ｨﾍ:ﾄ､ _　　　_ 　 ノ:ｲ/　　objects サブディレクトリはプロジェクトの全オブジェクトを持っている
　　　　　 rく､＼｀ ヽ二コ:千:|K、′　　　でも普段はこれらを見ることはない
　　　　　 |:..:ヽヽ＼: :Yﾆ|: :!:/j!:.l　　　　refs サブディレクトリにはそれらオブジェクトへの参照が格納されている
　　　　　 ﾄ:..:..:.＼ヽ＼!r|┴＝ミ!r ァ７ それと HEAD というファイルが現在作業中のブランチを指す
　　　　　｜!::.:..:.ヽ＼ヽ|!　　　 /７　/　
　　　　　 j::.l::..:..:.⌒ｰｧ⌒} 　 / / /^}
　　　　　 |::.:.＼::..::.::.::>ｰ'―-L∠_¨´
　　　　　 l::.::.:..:.￣￣ト ､, --､―弋i
　　　　 　 ヽ::.:..:..:.::..∧/　　　 ヽ　 i _ ..　-―
　　　　　　 ｀｀ｰニ´／ー-､　　 |　_|
　　　　　　　_.　-―　￣　 ト―.:｢:.:l
　　　　　　　　　　 　 　 　 ヽ:..__:L_|
　　　　　　　　　　　　　　　　ヽ.__)ﾉ


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　HEAD の中身は ref: refs/heads/master になってるはず
　 |i　|　从 ● 　 　 ●ｌ小N　 　 　 このファイルはシンボリックリンクみたいなもので作業中のブランチを指すんだよっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　 　master というのはデフォルトのブランチ名なのさ　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼　　知らない人が出てきたお！
　 ／　　　 （__人__）　　　＼　それに .git/refs/heads/master なんてファイルないお！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ　…気にしない
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　まだ一度もコミットしてないのだからブランチがないのはあたりまえ
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　リポジトリのセットアップが完了したね！
　 |i　|　从 ● 　 　 ●ｌ小N　 　 早速ファイルを配置してみるよっ！
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´

||<

** Populating a git repository
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　…とりあえず適当にファイルを作ってみて　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　　 　＿＿＿_
　　　　 ／ ＼　　／＼　ｷﾘｯ
.　　　／　（ー） 　（ー）＼　　
　　／　　 ⌒（__人__）⌒ ＼　　毒にも薬にもならないファイルを作るならやる夫にまかせるお！
　　|　　 　　　|r┬-|　　　　|　　
　　 ＼　　　　 `ー'´　　 ／　　
　　ノ　　　　　　　　　　 　＼
||<

>||
$ echo "Hello World" >hello
$ echo "Silly example" >example
||<

>|aa|

　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　お疲れさま
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　これらの変更をチェックインするには 2段階のステップを踏まなければいけない
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼
　 ／　　　 （__人__）　　　＼　なんだか面倒そうだお！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　…そのうち良さが分かってくる
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　2段階というのはこの2つ
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

+ 作業ツリーの状態をインデックス(キャッシュ) に記録する
+ インデックスをオブジェクトとしてコミットする

>|aa|

　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　最初のステップは簡単
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　git-update-index を使うだけ
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　これはファイル名を引数に取ってインデックスに追加する
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ git update-index --add hello example
||<

>|aa|

　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　ちなみに --remove でインデックスから除くことができるんだよっ　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.
　 |i　|　从 ● 　 　 ●ｌ小N　　ここで .git/objects を見てみるのさ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

>||
$ ls .git/objects/??/*
.git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
.git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼　　意味不明なファイルができてるお！
　 ／　　　 （__人__）　　　＼　ハッカーの仕業に違いないお！！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　オブジェクトはSHA1で記録されている
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　SHA1 に対して git-cat-file をすることで
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　オブジェクトがどのように格納されているか分かる
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

||<

>||
$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238
blob
||<

>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　-t オプションでオブジェクトの種類を表示する
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　blob というのはファイルの中身そのもの
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　他にも tree,commit,tag とあるけどそれは後述する　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　…git-cat-file の第1引数にオブジェクトの種類を渡すことでオブジェクトの中身を見ることができる
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ git cat-file blob 557db03de997c86a4a028e1ebd3a1ceb225be238
Hello World
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼ ﾎｼﾞﾎｼﾞ
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼ 　SHA1がファイルの中身を指してるってことかお
　 |　　　 ｍj |ー'´　　　　　 |
　 ＼　 〈＿_ﾉ　　　　　 　／
　　　　ノ　　ﾉ


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　ちなみにSHA1の指定は最初の数文字だけでもいいのさ
　 |i　|　从 ● 　 　 ●ｌ小N　　　　git cat-file blob 557db03 でも大丈夫なんだよっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

<!-- .git/index にインデックスの情報が格納されている -->

>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　インデックスができたんだからさっそくコミットするお！
　 ／::::::⌒（__人__）⌒::::: ＼ 　　何なら有希ちゃんにコミットしてやってもいいお！！
　 |　　　　　|r┬-|　　　　　|
　 ＼ 　　 　 `ー'´ 　 　 ／ 


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ　…その前に
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　今のファイルに変更を加えてみて
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　それから git-diff-files
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼　　またタンポポかお！
　 ／　　　 （__人__）　　　＼　さっさとコミットさせてほしいお！！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／
||<

>||
$ echo "It's a new day for git" >>hello
$ git diff-files
:100644 100644 557db03de997c86a4a028e1ebd3a1ceb225be238 0000000000000000000000000000000000000000 M      hello
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／　　 　 　＼
　　　／　 _ノ 　ヽ､_　 ＼
　 ／ 　oﾟ⌒　　　⌒ﾟo　 ＼ 　こんなの読めるわけないお…
　 |　　　　 （__人__）　　　　| 　　git ユーザーは相当なマゾヒストに違いないお…
　 ＼　　 　 ｀ ⌒´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ　
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　普段はこんなコマンド使わない　
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　-p オプションで差分をパッチのフォーマットで見られる
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼　　
　 ／　　　 （__人__）　　　＼　それなら最初かｒ…
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　 ／￣￣＼
　／　　 _ノ　　＼
　|　　　（ ●）（●）
.　|　　　　 （__人__）＿＿＿_
　 |　　　　　｀ ⌒／ ─'　'ー＼
.　 |　　 　 　　／（ ○） 　（○）＼
.　 ヽ　　 　 ／　　⌒（n_人__）⌒ ＼
　　 ヽ　　　|、　　　　（　　ヨ　　　　|
　　　/　　 　`ー─－　　厂　　　／
　　　|　　 ､ ＿ 　　__,,／　　　　 ＼
||<

>||
$ git diff-files -p
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@p@ -1 +1,2 @@
 Hello World
+It's a new day for git
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　これなら見たことあるお！
　 |　　　　　|r┬-|　　　　　|　　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　この結果を見れば分かる通り
　 |i　|　从 ● 　 　 ●ｌ小N　　　　git-diff-files はインデックスと作業ツリーの差分を表示するのさっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　ちなみに git diff で git diff-files -p と同じことができるにょろ
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

>||
$ git diff
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@p@ -1 +1,2 @@
 Hello World
+It's a new day for git
||<

>|aa|

　　 ／￣￣＼
　／　　 _ノ　　＼
　|　　　（ ●）（●）　
.　|　　　　 （__人__）＿＿＿_
　 |　　　　　｀ ⌒／ ─'　'ー＼
.　 |　　 　 　　／（ ○） 　（○）＼
.　 ヽ　　 　 ／　　⌒（n_人__）⌒ ＼　いちいちまわりくｄ…
　　 ヽ　　　|、　　　　（　　ヨ　　　　|
　　　/　　 　`ー─－　　厂　　　／
　　　|　　 ､ ＿ 　　__,,／　　　　 ＼


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　次はコミットだよ！
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　インデックスを作るだけで一節終わっちゃったねっ
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´

||<

** Commiting git state
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　コミットもさらに2段階の手順に分けられる
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

+ tree オブジェクトを作成し、
+ その tree を commit オブジェクトとしてコミットする

>|aa|
　　 　　 ＿__　　　　━┓
　　　 ／　―＼ 　　┏┛
　　／ノ　　(●)＼　 ・
.　｜　(●) 　 ⌒）＼　tree と commit はどう違うのかお？
.　｜　　 （__ノ￣　　|　てか tree てなんだお？
　　＼　　　　　　　 /
　　　 ＼　　　　 _ノ
　　　　/´　　 　 ｀＼
　　 　 |　　　　　　　|
　　 　 |　　　　　　　|


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　ファイルの内容を指す blob に対し
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　tree はディレクトリの内容を指す
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 commit は tree に加えてコミットメッセージや時刻などの情報を含んでいる
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　分かったような気がするお！
　 |　　　　　|r┬-|　　　　　|　はやく tree を作ってみるお！　　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　インデックスの内容を tree オブジェクトとして作成するには
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　git-write-tree を使う
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ git write-tree
8988da15d077d4829fc51d8544c097def6644dbb
||<

>|aa|

　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　これが何か分かるかい？
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　　 　　 　＿＿＿_
　　　　 ／ ＼　　／＼　ｷﾘｯ
.　　　／　（ー） 　（ー）＼　　40桁のSHA1だから git のオブジェクトに違いないお！
　　／　　 ⌒（__人__）⌒ ＼　きっと今作成された tree オブジェクトだお！！
　　|　　 　　　|r┬-|　　　　|　　git-cat-file してみるお！
　　 ＼　　　　 `ー'´　　 ／　　
　　ノ　　　　　　　　　　 　＼
||<

>||
$ git cat-file -t 8988da
tree
||<

>|aa|
　　　　　　　　　　　　 (ヽ三/)　））
　　　　　　　　　＿＿　 ( i)))
　　　　 　　　／⌒　　⌒＼　＼
　　　　　　／（ ●） 　（●）＼ ）　　思った通りだおｗｗｗ
　　　　.／:::::: ⌒（__人__）⌒::::＼　　やる夫は天才だおｗｗｗｗ
　　　　| 　 　(⌒)|r┬-|　　　　　|　　次はどうせ git cat-file tree すればいいんだお！！
　　　 ,┌､-､!.~〈`ー´/　　 ＿/
　　　 | |　|　|　 __ヽ、　　　/
　　　 ﾚレ'､ﾉ‐´　　￣〉　　|
　　　　｀ｰ---‐一'￣ 
||<

>||
$ git cat-file tree 8988da
100644 example�Lt����2�k��R���b100644 helloU}�=��jJ��:�"[�8
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼
　 ／　　　 （__人__）　　　＼　なんぞこれ！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　tree に対して git-cat-file しても有用なものは得られない
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　あなたは言われたことだけしてればいい
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／　　 　 　＼
　　　／　 _ノ 　ヽ､_　 ＼　　　悪かったお…
　 ／ 　oﾟ⌒　　　⌒ﾟo　 ＼ 　 ちょっと有希ちゃんにカッコいいとこ見せたかっただけだお…
　 |　　　　 （__人__）　　　　|
　 ＼　　 　 ｀ ⌒´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　commit オブジェクトを作るには git-commit-tree を使う
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　これは標準入力からコミットメッセージを受け取る
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 そして git-write-tree と同様に commit オブジェクトのSHA1を出力する
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ tree=$(git write-tree)
$ commit=$(echo 'Initial commit' | git commit-tree $tree)
$ git update-ref HEAD $commit|
||<

>|aa|
　　 　　 ＿__　　　　━┓
　　　 ／　―＼ 　　┏┛
　　／ノ　　(●)＼　 ・
.　｜　(●) 　 ⌒）＼　git-update-ref ってなんだお？
.　｜　　 （__ノ￣　　|　
　　＼　　　　　　　 /
　　　 ＼　　　　 _ノ
　　　　/´　　 　 ｀＼
　　 　 |　　　　　　　|
　　 　 |　　　　　　　|


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　HEAD が差すファイル .git/refs/heads/master は
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　master ブランチの最新コミットへの参照になっている
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　  git-update-ref で今作成した commit オブジェクトを格納させる
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　.git/refs/heads/master ってファイルができてるはずだよっ
　 |i　|　从 ● 　 　 ●ｌ小N　　　この中身は $commit と同じになってるはずさっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　ちなみに普通のコミットは親コミットを持つ
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　 これは最初のコミットだったから要らなかったけど　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　  以降は git-commit-tree には親コミットのSHA1を渡す必要がある
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／　　 　 　＼
　　　／　 _ノ 　ヽ､_　 ＼　　手順多すぎだお…
　 ／ 　oﾟ⌒　　　⌒ﾟo　 ＼ 　やる夫はゆとり世代なんだからもっと配慮してほしいお…
　 |　　　　 （__人__）　　　　|
　 ＼　　 　 ｀ ⌒´ 　 　 ／



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　…大丈夫
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　 今の3つのコマンドを行う git-commit というスクリプトがある
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　  普通これを使う
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼　　またかお！
　 ／　　　 （__人__）　　　＼　なら最初からそれを教えてほしかったお！！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　ようやくコミットまで辿りつけたねっ
　 |i　|　从 ● 　 　 ●ｌ小N　　　ちなみに言われた通りにやってれば
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　　commit 以外のオブジェクトのSHA1はこのチュートリアルとまったく同じになってるはずだよっ
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　 commit には時刻やコミッタの情報が含まれてるから環境によって違うんだねっ
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

** Making a change
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　…思い出して
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　 インデックスに入っていた hello ファイルと
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 　その後変更した hello ファイルは別物だった
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼ ﾎｼﾞﾎｼﾞ
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼ 　確かに git-diff-files -p の結果は
　 |　　　 ｍj |ー'´　　　　　 |　　インデックスに追加したファイルとワーキングツリーとの差分だったお
　 ＼　 〈＿_ﾉ　　　　　 　／
　　　　ノ　　ﾉ


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　git-write-tree で作成される tree の内容も
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 インデックスの中身と一緒
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　git-diff-index で tree とインデックス、
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　　　　もしくは tree とワーキングツリーとの差分を見ることができる
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　デフォルトでは tree とワーキングツリーとの差分
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<

>||
$ git diff-index -p HEAD
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
 Hello World
+It's a new day for git
||<

>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　　さっきの git diff-file -p と同じ diff が出力されたお！
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　HEAD っていうのは master の最後のコミットを指すんだったねっ
　 |i　|　从 ● 　 　 ●ｌ小N　　　だからこれはさっきのコミットツリーとワーキングツリーとの diff なんだよっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　git diff HEAD で git diff-index -p HEAD と同じことができる
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　 
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　　コマンドの小出しにはもう慣れたお！
　 ／::::::⌒（__人__）⌒::::: ＼　　
　 |　　　　　|r┬-|　　　　　|　　
　 ＼ 　　 　 `ー'´ 　 　 ／



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　今のは tree とワーキングツリーとの差分だった
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　git diff-index に --cached オプションを渡すことで
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　tree とインデックスの差分を見ることができる
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git diff-index --cached -p HEAD
||<

>|aa|
　　 　　 　＿＿＿_
　　　　 ／ ＼　　／＼　ｷﾘｯ
.　　　／　（ー） 　（ー）＼　　何の差分も出力されないのは
　　／　　 ⌒（__人__）⌒ ＼　　今のインデックスはさっきコミットしたばかりだからだお！
　　|　　 　　　|r┬-|　　　　|　　
　　 ＼　　　　 `ー'´　　 ／　　
　　ノ　　　　　　　　　　 　＼

　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　ちなみに git-diff-index はインデックスに入ってるファイルのみ比較するにょろ
　 |i　|　从 ● 　 　 ●ｌ小N　　　適当にファイルを作ってもインデックスに入ってなければその diff は表示されないよっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　…これからファイルへの変更をコミットする
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　「ワーキングツリー」「インデックス」「コミットされたツリー」
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　この三つの違いを意識しておいて
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　　　まずはインデックスを更新する　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
git update-index hello
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　もうインデックスに追加されてるから --add はいらないよっ
　 |i　|　从 ● 　 　 ●ｌ小N　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　ここで git-diff-* を試してみて
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git diff-files -p
$ git diff-index -p HEAD
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
 Hello World
+It's a new day for git
$ git diff-index --cached -p HEAD
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
 Hello World
+It's a new day for git

||<
>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　インデックスとワーキングツリーの内容が一緒だから
　 ／::::::⌒（__人__）⌒::::: ＼　git-diff-files は何も出力しなくなったんだお！
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　そう…インデックスを更新したから次はコミット
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ＞） 　（＜）＼　　git-write-tree なんて使ってらんないお！
　 ／::::::⌒（__人__）⌒::::: ＼ 　さっき言ってた git-commit を使ってみるお！
　 |　　　　/| | | | |　　　　　|　 目標をインデックスに入れてコミットだお！
　 ＼　 (、`ー―'´,　　 　／
　　　　　 ￣￣￣ 　

　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　git-commit は自動的に HEAD を親コミットとしてコミットしてくれるのさっ
　 |i　|　从 ● 　 　 ●ｌ小N　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ git commit

# Please enter the commit message for your changes.
# (Comment lines starting with '#' will not be included)
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#>      modified:   hello
#
||<
>|aa|
　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼　　
　　　／（ ○）}liil{（○）＼　　vi が起動したお！保存も終了もできないお！！
　 ／　　　 （__人__）　　　＼　
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　　　　　　　　　 　 -‐ '´￣￣｀ヽ､
　　 　 　 　 　 　 ／　／" ｀ヽ ヽ　　＼
　　　　　　　　　//, '/　　　　 ヽﾊ 　､　ヽ　幼稚園からやり直してこい！
　　　　　　　　 〃 {_{＼　　　 ／ﾘ| ｌ │ i|　i で挿入モード、コミットメッセージを書いて
　　　　　　　　 ﾚ!小ｌ●　　　 ● 从　|、i|　<ESC> で抜けたら ZZ で保存終了だよっ！
　　　　　　　 　 ヽ|l⊃　､_,､_,　⊂⊃　|ﾉ│
　 　 　 　 /⌒ヽ__|ﾍ　　 ゝ._）　 　j /⌒i !　ちなみに # で始まる行は削除されるから無視していいんだよっ！
　　　　　　＼ /:::::|　l＞,､ __,　イァ/　 /│
.　　　　　 　 /:::::/|　|　ヾ:::|三/::{ﾍ､__∧ |
　　　　　　　｀ヽ< |　|　　ヾ∨:::/ヾ:::彡'　|
||<
>||
".git/COMMIT_EDITMSG" 13L, 353C 書込み

Created commit bb83222: ⊂二二二（ ＾ω＾）二⊃
 1 files changed, 1 insertions(+), 0 deletions(-)
||<
>|aa|
　　　　　　　　　＿＿＿
　　　　　　　／ ⌒　　⌒＼
　　　　　 ／　（⌒）　 （⌒） ＼　　　
　　　　／ 　 ///（__人__）/// ＼　で、できた！
　　 　 |　　 u. 　 `Y⌒y'´　　　 |　　やる夫にもコミットできたお！！
　 　 　 ＼ 　 　 　 ﾞー ′　　,／　　　
　　　 　 /⌒ヽ　 　ー‐ 　 　ｨヽ　　　　
　 　 　 / rｰ'ゝ　　　　　　　〆ヽ
　　　　/,ﾉヾ　,>　　　　　　ヾ_ノ,|
　　　　|　ヽ〆　　　　　　　　|´　|



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　お疲れさま…
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　「インデックスに追加してコミット」これが基本
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　覚えておいて
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　次は過去のコミットを参照する方法だよ！
　 |i　|　从 ● 　 　 ●ｌ小N　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

** Inspecting Changes
>|aa|

　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　diff シリーズにはもう一つ git-diff-tree というコマンドがある
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　これはコミットされた tree 同士を比較する
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　 　　　＿＿＿_
　 　　　／　　 　 　＼
　　　／　─　 　 ─　＼
　 ／ 　 （○） 　（○） 　 ＼　まだあるのかお…
　 |　 　 　 （__人__）　　　　|　　正直覚えられないお…
　 ＼　　 　 ｀ ⌒´ 　 　 ／ 
||<
>||
$ git diff-tree -p HEAD
bb8322210e30931a1d916b0d7d4dd24036ab6bbf
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
 Hello World
+It's a new day for git
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　…HEAD, つまり最後のコミットとその親コミットでの
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　ツリーの diff が出力された
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　やる夫くんにもわかるように AA を拾ってきたよ！
　 |i　|　从 ● 　 　 ●ｌ小N　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
            diff-tree
             +----+
             |    |
             |    |
             V    V
          +-----------+
          | Object DB |
          |  Backing  |
          |   Store   |
          +-----------+
            ^    ^
            |    |
            |    |  diff-index --cached
            |    |
diff-index  |    V
            |  +-----------+
            |  |   Index   |
            |  |  "cache"  |
            |  +-----------+
            |    ^
            |    |
            |    |  diff-files
            |    |
            V    V
          +-----------+
          |  Working  |
          | Directory |
          +-----------+
||<
>|aa|
　　　　　　＿＿＿
　　　　／ ⌒　　⌒＼
　　 ／　（⌒）　 （⌒） ＼　　　
　／ 　 ///（__人__）/// ＼　　
  |　　 u. 　 `Y⌒y'´　　　 |　　　ありがたいお！
　 ＼ 　 　 　 ﾞー ′　　,／　　　さっそく壁紙にしたお！！
 　 /⌒ヽ　 　ー‐ 　 　ｨヽ　　　　
　 / rｰ'ゝ　　　　　　　〆ヽ
　/,ﾉヾ　,>　　　　　　ヾ_ノ,|
　|　ヽ〆　　　　　　　　|´　|


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　　git-diff-tree に --pretty オプションを渡すと
　 |i　|　从 ● 　 　 ●ｌ小N　　　 コミットメッセージも一緒に表示してくれるよ！
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　これをリビジョンのリストを表示してくれる git-rev-list を組み合わせると
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　プロジェクトの変更履歴が見られて便利なのさ
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 git-whatchanged ってコマンドがそれをやってくれるんだよっ
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　 　 　　　＿＿＿_
　 　　　／　　 　 　＼
　　　／　 _ノ 　ヽ､_　 ＼　　難しすぎるお…
　 ／ 　oﾟ⌒　　　⌒ﾟo　 ＼ 　もっと簡単な方法を要求するお…
　 |　　　　 （__人__）　　　　|
　 ＼　　 　 ｀ ⌒´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　普段使う分には git-log で十分…
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git log
commit bb8322210e30931a1d916b0d7d4dd24036ab6bbf
Author: yaruo <yaruo@example.com>
Date:   Sat Jul 26 15:24:24 2008 +0900

    ⊂二二二（ ＾ω＾）二⊃

commit 71e583b286465e8ec7b92d4b642dc77fee53562e
Author: yaruo <yaruo@example.com>
Date:   Sat Jul 26 13:02:42 2008 +0900

    Initial commit

||<
>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　コミットログが見れたお！
　 ／::::::⌒（__人__）⌒::::: ＼　簡単だお！！
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　低レベルなコマンドから解説しているけれど
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 git-commit のようにだいたい簡単なコマンドが用意されている
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　例えば git-update-index --add は git-add で
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　git-update-index --remove は git-rm で代用できる
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　git は低レベルなタンポポコマンドと
　 ／::::::⌒（__人__）⌒::::: ＼　高レベルなゆとりコマンドで構成されてるってことかお！
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　ゆとり乙！
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　　次はタグの作成だよっ！
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

<!-- --root オプション、git-whatchanged -p -->

** Tagging a version
>|aa|

　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　…git のタグには
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 「軽い(light)」タグと
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　　「説明つき(annotated)」タグの2種類ある
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　　軽いタグというのは単にブランチと同じものと言っていい
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git tag my-first-tag
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　このコマンドは HEAD を .git/refs/tags/my-first-tag というファイルに書き込むだけだよ！
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　こうやっておくことであとからこの時点のコミットを参照できるのさっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ git diff my-first-tag
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　こうすると後から今の時点との diff を見ることができる
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　もちろん今は何も出力されない
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |

　 　　　＿＿＿_　　
　　　／　　 　 　＼
　 ／　　─　 　 ─＼　　　　なるほど…。.git/refs/heads/* はコミットの度に新しいSHA1が刻まれるが
／ 　　 （●） 　（●） ＼　　tags/* にその時点でのコミットを保存しておいて
|　 　　 　 （__人__）　 　 |　　後から参照できるようにするということかお
/　　　　 ∩ノ ⊃　　／
(　 ＼　／ ＿ノ　|　 |
.＼　“　　／＿＿|　 | 　
　　＼ ／＿＿＿ ／ 　 


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　説明つきタグは git のオブジェクト
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　tree にコミットメッセージを付けて commit オブジェクトが生成されたように
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　commit にメッセージや署名を加えて tag オブジェクトを生成する
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git tag -s <tagname>
||<
>|aa|
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　またエディタが起動したお！
　 ／::::::⌒（__人__）⌒::::: ＼　ここにリリース用のメッセージなんかを書けばいいお？
　 |　　　　　|r┬-|　　　　　|　ZZ で保存だお！
　 ＼ 　　 　 `ー'´ 　 　 ／

　 　 　　　＿＿＿_
　 　　　／ノ 　 ヽ､_＼
　　　／（ ○）}liil{（○）＼
　 ／　　　 （__人__）　　　＼　なんかエラーが出たお！
　 |　　　ヽ　|!!il|!|!l|　/　　　|
　 ＼　　　　|ｪｪｪｪ| 　 　 ／


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　-s は PGP 署名をするから ちゃんと設定してないとエラーが出るかもね
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　-a でやれば署名をしないよっ
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼　　なんだお！
　　　／（ ●） 　（●）＼　　そういう事は先に言うお！
　 ／::::::⌒（__人__）⌒::::: ＼　
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／

||<
>||
$ git tag -a my-annotated-tag
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　.git/refs/tags/my-annotated-tag は tag オブジェクトへの参照になっているはずだよっ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ git cat-file -t `cat .git/refs/tags/my-first-tag`
commit
$ git cat-file -t `cat .git/refs/tags/my-annotated-tag`
tag
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　…説明つきタグはリリース時に
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 軽いタグは自分用に使うといい
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　これで git の 4種類のオブジェクトが全部出てきたね！
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　次はリポジトリの移動についてだよっ！
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

** Copying repositories
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　git リポジトリの情報は全て .git ディレクトリに入っているから
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 プロジェクトのディレクトリだけで完結している
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　例えば CVS とは違って…リポジトリとワーキングツリーは同じもの
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　実は .git ディレクトリ以外の場所に情報を格納することもできるんだけど
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　そんなことは今考えるべきことじゃないねっ！
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　 　　　＿＿＿_　　
　　　／　　 　 　＼
　 ／　　─　 　 ─＼　
／ 　　 （●） 　（●） ＼　つまりプロジェクトのディレクトリを消したら
|　 　　 　 （__人__）　 　 |　　本当に全て無くなってしまうということかお…ちょっと怖いお
/　　　　 ∩ノ ⊃　　／
(　 ＼　／ ＿ノ　|　 |
.＼　“　　／＿＿|　 | 　
　　＼ ／＿＿＿ ／ 　 
||<
>||
$ rm -rf git-tutorial
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　プロジェクトのコピーもディレクトリのコピーだけでできるんだよっ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ cp -a git-tutorial new-git-tutorial. 
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　インデックスにはファイルの stat 情報も含まれているから
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 プロジェクトを移動・コピーしたときは
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　インデックスを更新する必要がある
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |



　　 　　 ＿__　　　　━┓
　　　 ／　―＼ 　　┏┛
　　／ノ　　(●)＼　 ・
.　｜　(●) 　 ⌒）＼　パーミッションとかのことかお？
.　｜　　 （__ノ￣　　|　とりあえず言われた通りにやっとくお
　　＼　　　　　　　 /
　　　 ＼　　　　 _ノ
　　　　/´　　 　 ｀＼
　　 　 |　　　　　　　|
　　 　 |　　　　　　　|
||<
>||
$ git update-index --refresh
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　プロジェクトのコピーは別々のマシン間でも同じようにできるんだよっ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　その場合、インデックスがどうなってるか分からないから
　 |i　|　从 ● 　 　 ●ｌ小N　　　一度リセットするのがオススメにょろ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ git read-tree --reset HEAD
$ git update-index --refresh
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　これでインデックスの内容が HEAD と同じになる
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 ちなみにこれは git-reset で代用できる
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git reset
||<
>|aa|
　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼ ﾎｼﾞﾎｼﾞ
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼ 　簡単なほうのコマンドだけ教えてくれれば十分だお
　 |　　　 ｍj |ー'´　　　　　 |
　 ＼　 〈＿_ﾉ　　　　　 　／
　　　　ノ　　ﾉ
||<
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　…公開されている git リポジトリのほとんどが
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 実際のファイルではなく .git ディレクトリを公開している
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　そういうリポジトリをコピーするにはこうすればいい
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ mkdir my-git
$ cd my-git
$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git
$ git read-tree HEAD
||<
>|aa|
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼　　とりあえず .git ディレクトリを作ってインデックスを HEAD と同期してるんだおね！
　 ／::::::⌒（__人__）⌒::::: ＼　
　 |　　　　　|r┬-|　　　　　|　
　 ＼ 　　 　 `ー'´ 　 　 ／
||<
>||
$ git checkout-index -u -a
||<
>|aa|
　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　このコマンドでワーキングツリーにファイルをチェックアウトできるよ！
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　-u はあとから git update-index --refresh しなくていいようにインデックスを最新に保つ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　-a は全部のファイルをチェックアウトするオプションなのさっ
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　 　　　＿＿＿_
　　　／　　 　 　＼ （ ;;;;(
　 ／　　＿ノ　 ヽ__＼) ;;;;)
／ 　　 （─） 　（─ /;;／
|　 　　 　 （__人__） l;;,´　これだけまわりくどいという事は
/　　　 　 ∩ ノ)━・'／　　　　必ずもっと簡単なコマンドがあるはずだお…
(　 ＼　／ ＿ノ´.|　 |
.＼　 " 　／＿＿|　 |
　　＼ ／＿＿＿ ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　…ある…
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git clone rsync://rsync.kernel.org/pub/scm/git/git.git/ my-git
$ cd my-git
$ git checkout
||<
>|aa|
　　　　　　　　　＿＿＿
　　　　　　　／ ⌒　　⌒＼
　　　　　 ／　（⌒）　 （⌒） ＼　　　
　　　　／ 　 ///（__人__）/// ＼　　
　　 　 |　　 u. 　 `Y⌒y'´　　　 |　　さすが git だお！
　 　 　 ＼ 　 　 　 ﾞー ′　　,／ 　　うちに来て妹をファックしていいお！
　　　 　 /⌒ヽ　 　ー‐ 　 　ｨヽ　　　
　 　 　 / rｰ'ゝ　　　　　　　〆ヽ 　　
　　　　/,ﾉヾ　,>　　　　　　ヾ_ノ,|
　　　　|　ヽ〆　　　　　　　　|´　|



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　ちなみにさっき私が clone しようとしたら失敗したにょろ
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　そういう場合は git clone git://github.com/hotchpotch/yaruo.git でもしてればいいのさっ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　次はやっとブランチの作成だよ！
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<

** Creating a new branch
>|aa|
　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　ブランチというのは .git/refs から git の commit オブジェクトへの
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 参照に他ならない
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　さらに HEAD というのはそれらの一つへのシンボリックリンク…
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　.git/HEAD の中身は "ref: refs/heads/master" だったよね！
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´



　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　.git/refs/heads に SHA1 を書き込んだファイルを作るだけでブランチになる
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 デフォルトでは master というブランチしかない
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　ブランチをチェックアウトするには git-checkout -b する
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git checkout -b mybranch
Switched to a new branch "mybranch"
||<
>|aa|
　 　　　　＿＿＿_
　 　　　／⌒　　⌒＼
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼　.git/refs/heads/mybranch ってファイルができたお！
　 |　　　　　|r┬-|　　　　　|　　.git/refs/heads/master と同じ中身だお！
　 ＼ 　　 　 `ー'´ 　 　 ／


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　…このコマンドはブランチを作るだけでなく
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 HEAD もそのブランチに移動させる
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |


　 　 　　　＿＿＿_
　 　　　／⌒　　⌒＼ ﾎｼﾞﾎｼﾞ
　　　／（ ●） 　（●）＼
　 ／::::::⌒（__人__）⌒::::: ＼ 　確かに .git/HEAD の中身は "ref: refs/heads/mybranch" になってたお
　 |　　　 ｍj |ー'´　　　　　 | 　今やる夫は mybranch ブランチにいるということかお
　 ＼　 〈＿_ﾉ　　　　　 　／
　　　　ノ　　ﾉ



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　今のコマンドでは HEAD からブランチを分岐させたけど
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　特定のコミットから分岐させることもできるんだよっ！
　 |i　|　从 ● 　 　 ●ｌ小N　　　$ git checkout -b mybranch earlier-commit ってするだけなのさっ
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´


　　　　　　　　　　　／.:.:.　　　　　　　　 ＼
　 　 　 　 　 　 　 /:,:.:.:　 ／　　　ヽ　　　　＼
　　　　　　　　　 /.:.l:.:.:/:/　　　:/ 　',　:l　　 ヾ`ｰ
　 　 　 　 　 　 /!:.:.|:.: l/　 〃 /　j　}　:|　 　 ﾊ
　　　　　　　　/ｲ:.:.i|:.:.jL∠/_/ | /l.ﾑ_/|　l 　ｌ }　　master に戻りたくなったら
　　　　　　　　　N:.ﾊ:.:.:lｨfｱﾄ/　ﾚ　ｨ=ﾄ | /| ∧j　　 　　 また git-checkout …
　　　　　　　　　　ヽﾑ:.} ii;_j　　　　ii;ﾘ ﾙ iﾚヽ.　　　
　 　 　 　 　 　 　 　 `ﾍ:ゝ　　　_ 　 　 小/　　　　　
　 　 　 　 　 　 　 　 　 ヾ:{＞､ _　ｨ＜}/|/　　　　　
　　　　　　　　　　 _, ｨr'´ヽ｛ __＿`}　ヽ､_　　　
　　　　　　　　　／| l:|　　　| =＝=|　　 |:lﾞヽ　　　
　　　　　 　 　 /　 | l:ｌ　　　l 　 　 l　　 l::ｌ　l
　　 　 　 　 　 l　　ヽﾊ　 　 l　 　 l　　//　 |
||<
>||
$ git checkout master
Switched to branch "master"
||<
>|aa|

　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　git-branch でブランチの一覧を見ることができるんだよっ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
>||
$ git branch
* master
  mybranch
||<
>|aa|
　　　　　　　　　　　　 (ヽ三/)　））
　　　　　　　　　＿＿　 ( i)))
　　　　 　　　／⌒　　⌒＼　＼
　　　　　　／（ ●） 　（●）＼ ）　　ls .git/refs/heads とほとんど変わらないお！
　　　　.／:::::: ⌒（__人__）⌒::::＼　　こんなコマンド作るなんてリーナスは相当の暇人に違いないおｗｗｗ
　　　　| 　 　(⌒)|r┬-|　　　　　|　　
　　　 ,┌､-､!.~〈`ー´/　　 ＿/
　　　 | |　|　|　 __ヽ、　　　/
　　　 ﾚレ'､ﾉ‐´　　￣〉　　|
　　　　｀ｰ---‐一'￣ 



　　　　　 ／￣￣＼　
　　　　／ﾉ(　_ノ　　＼
　　　　|　⌒(（ ●）（●）
　　　　.|　　　　 （__人__）　/⌒l
　　　 　|　　　　　｀ ⌒´ﾉ　|`'''|
　　　　／ ⌒ヽ　　　　 }　 |　 |　　　　　　　　　　　　　　
　　 ／　 へ　　＼　　 }__/　/ 　　 　　　　　　　　　／￣￣＼
　／　／　|　　　　　 ノ 　 ノ　　　　　　　　　　　／ ●))　((●＼’,　･
( _ ノ　　　 |　　　　　 ＼´　　　　　　 ＿　 　　（　　　(_人_)’∴　）,　 ’
　　　　　 　|　　　　　　　＼＿,, -‐ ''"　 ￣￣ﾞ''―---└'´￣｀ヽ　　　て
　　　　　　 .|　　　　　　　　　　　　　　　　　　＿＿＿＿＿＿ ノ　　 　（
　　　　　　　ヽ　　　　　　　　　　　＿,, -‐ ''"　　ﾉ　　　　　　 ヽ　　　ｒ'"￣
　　　　　　　　 ＼　　　　　　　, '´　　　　　　　　し/.. 　　　　| J
　　　　　　　　　　＼　　　　　(　　　　　　　　　　 /　　　　　 |
　　　　　　　　　　　 ＼　　　　＼　　　　　　　　　し-　 '^`-J 



　　 　 ,　'´￣￣｀ ｰ-､　　　　　
　　 ／　　 〃" ｀ヽ､　＼　　　　
　 /　/　 ﾊ/　　　　 ＼ﾊﾍ　　　チェックアウトせずにブランチを作りたいときは git-branch が使えるにょろ
　 |i │ ｌ |ﾘノ　　　 ｀ヽ}_}ハ.　　
　 |i　|　从 ● 　 　 ●ｌ小N　　　次はブランチのマージだよ！
　 |i （|　⊂⊃ ､_,､_,　⊂lｉ|ノ　　 　
　 | i⌒ヽ j　　（_.ノ 　　ﾉi|__／⌒)　
　 | ヽ 　ヽx＞､ __,　イｌ　|::::ヽ／.　 
　 |　∧__,ﾍ}::ﾍ三|:::::/ｌ|　|',:::::ﾊ　　
　 |　ヾ_:::ッﾘ :::∨:／　|　| >'''´
||<
